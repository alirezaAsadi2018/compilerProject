/* The following code was generated by JFlex 1.7.0 */

package jflex;

import cup.sym;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.*;




/**
* This class is a lexer generated by Alireza Asadi on 2019/3/29.
*/


public class MyScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int String = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\40\1\0\1\20\1\41\22\0\1\20\1\72\1\16"+
    "\4\0\1\4\1\61\1\62\1\45\1\33\1\63\1\34\1\35\1\44"+
    "\1\25\1\31\6\32\2\3\1\66\1\60\1\73\1\71\1\74\1\17"+
    "\1\0\1\2\1\30\2\2\1\36\1\37\5\1\1\24\10\1\1\22"+
    "\2\1\1\27\2\1\1\67\1\5\1\70\1\64\1\1\1\0\1\6"+
    "\1\7\1\51\1\46\1\10\1\11\1\53\1\55\1\50\1\1\1\52"+
    "\1\23\1\1\1\12\1\47\1\56\1\1\1\13\1\43\1\14\1\21"+
    "\1\15\1\54\1\26\1\1\1\57\1\0\1\42\1\0\1\65\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\1\7\2\1\4\1\5"+
    "\2\2\1\3\1\6\1\7\1\10\1\5\1\11\1\2"+
    "\2\1\4\2\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\1\1\24\1\1\1\25"+
    "\1\26\1\27\1\0\2\3\2\30\1\31\2\0\20\2"+
    "\1\0\1\3\1\0\1\32\1\0\1\33\1\34\1\35"+
    "\2\31\3\2\2\0\1\36\1\37\2\2\1\40\1\41"+
    "\1\42\1\43\3\2\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\2\31\1\0\2\30\1\31\1\54"+
    "\1\0\1\55\4\2\1\56\4\2\1\57\1\60\6\2"+
    "\2\3\3\2\2\0\2\2\1\61\3\2\1\62\1\63"+
    "\2\2\1\64\1\65\7\2\1\66\1\2\1\67\3\2"+
    "\1\0\2\2\1\70\2\2\1\71\1\72\1\73\2\2"+
    "\1\74\4\2\1\75\6\2\1\76\1\77\2\2\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\2\1\106\2\2"+
    "\1\107\1\110\1\2\1\111\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\172\0\172\0\u0319"+
    "\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\172\0\u04c4"+
    "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\172\0\172"+
    "\0\172\0\172\0\172\0\172\0\172\0\172\0\172\0\u066f"+
    "\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\172\0\u07dd\0\u081a"+
    "\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02"+
    "\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea"+
    "\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2"+
    "\0\u0e0f\0\172\0\u044a\0\172\0\172\0\172\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\172\0\172\0\u0ff7"+
    "\0\u1034\0\267\0\267\0\267\0\u1071\0\u10ae\0\u10eb\0\u1128"+
    "\0\172\0\172\0\172\0\172\0\172\0\172\0\172\0\172"+
    "\0\u1165\0\u11a2\0\u11df\0\172\0\u121c\0\172\0\172\0\u1259"+
    "\0\267\0\u1296\0\u12d3\0\u1310\0\u134d\0\267\0\u138a\0\u13c7"+
    "\0\u1404\0\u1441\0\u147e\0\267\0\u14bb\0\u14f8\0\u1535\0\u1572"+
    "\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a"+
    "\0\u1797\0\u17d4\0\u1811\0\267\0\u184e\0\u188b\0\u18c8\0\172"+
    "\0\267\0\u1905\0\u1942\0\267\0\267\0\u197f\0\u19bc\0\u19f9"+
    "\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\267\0\u1b2a\0\267\0\u1b67"+
    "\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\267\0\u1cd5\0\u1d12"+
    "\0\267\0\267\0\267\0\u1d4f\0\u1d8c\0\267\0\u1dc9\0\u1e06"+
    "\0\u1e43\0\u1e80\0\267\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1"+
    "\0\u1fee\0\267\0\267\0\u202b\0\u2068\0\267\0\267\0\267"+
    "\0\267\0\267\0\267\0\u20a5\0\267\0\u20e2\0\u211f\0\267"+
    "\0\267\0\u215c\0\267\0\267";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\4\1\15\1\16\1\3\1\17"+
    "\1\20\1\4\1\21\1\4\1\22\3\4\2\5\1\23"+
    "\1\24\1\25\2\4\1\17\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\6\4\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\5\54\1\55\10\54\1\56\21\54"+
    "\2\0\33\54\76\0\3\4\2\0\10\4\3\0\12\4"+
    "\3\0\2\4\3\0\1\4\2\0\12\4\20\0\1\5"+
    "\4\0\1\57\10\0\1\60\1\61\1\62\1\63\1\5"+
    "\3\0\2\5\2\0\1\64\1\57\36\0\4\65\1\0"+
    "\1\66\67\65\1\0\3\4\2\0\4\4\1\67\3\4"+
    "\3\0\1\70\11\4\3\0\2\4\3\0\1\4\2\0"+
    "\12\4\16\0\3\4\2\0\2\4\1\71\2\4\1\72"+
    "\2\4\3\0\12\4\3\0\2\4\3\0\1\4\2\0"+
    "\1\4\1\73\10\4\16\0\3\4\2\0\4\4\1\74"+
    "\3\4\3\0\2\4\1\75\2\4\1\76\4\4\3\0"+
    "\2\4\3\0\1\4\2\0\12\4\16\0\3\4\2\0"+
    "\10\4\3\0\1\77\1\4\1\100\7\4\3\0\2\4"+
    "\3\0\1\4\2\0\1\4\1\101\10\4\16\0\3\4"+
    "\2\0\10\4\3\0\12\4\3\0\2\4\3\0\1\4"+
    "\2\0\1\4\1\102\10\4\16\0\3\4\2\0\2\4"+
    "\1\103\5\4\3\0\12\4\3\0\2\4\3\0\1\4"+
    "\2\0\12\4\16\0\3\4\2\0\10\4\3\0\12\4"+
    "\3\0\2\4\3\0\1\4\2\0\1\4\1\104\10\4"+
    "\16\0\3\4\2\0\4\4\1\105\3\4\3\0\12\4"+
    "\3\0\2\4\3\0\1\4\2\0\12\4\16\0\3\4"+
    "\2\0\10\4\3\0\12\4\3\0\2\4\3\0\1\4"+
    "\2\0\1\4\1\106\10\4\24\0\1\107\1\57\10\0"+
    "\1\60\1\61\1\62\1\63\1\110\2\111\1\107\2\110"+
    "\2\0\1\64\1\57\41\0\1\5\21\0\1\22\3\0"+
    "\2\5\1\112\1\0\1\113\33\0\1\114\6\0\1\5"+
    "\21\0\1\22\3\0\2\5\1\0\1\115\1\113\33\0"+
    "\1\116\6\0\1\117\21\0\1\120\3\0\2\117\102\0"+
    "\1\17\35\0\3\4\2\0\6\4\1\121\1\4\3\0"+
    "\12\4\3\0\2\4\3\0\1\4\2\0\2\4\1\122"+
    "\3\4\1\123\3\4\61\0\1\124\1\125\23\0\1\126"+
    "\74\0\1\127\4\0\3\4\2\0\2\4\1\130\5\4"+
    "\3\0\12\4\3\0\2\4\3\0\1\4\2\0\1\4"+
    "\1\131\10\4\16\0\3\4\2\0\3\4\1\132\1\4"+
    "\1\133\2\4\3\0\12\4\3\0\2\4\3\0\1\4"+
    "\2\0\12\4\16\0\3\4\2\0\3\4\1\134\1\135"+
    "\3\4\3\0\12\4\3\0\2\4\3\0\1\4\2\0"+
    "\12\4\16\0\3\4\2\0\1\136\7\4\3\0\12\4"+
    "\3\0\2\4\3\0\1\4\2\0\1\4\1\137\5\4"+
    "\1\140\2\4\106\0\1\141\74\0\1\142\74\0\1\143"+
    "\74\0\1\144\3\0\5\54\1\0\10\54\1\0\21\54"+
    "\2\0\33\54\12\0\1\145\1\146\1\147\1\0\1\150"+
    "\61\0\1\151\21\0\1\152\3\0\2\151\2\153\63\0"+
    "\1\62\1\154\73\0\1\154\1\63\73\0\1\155\1\154"+
    "\73\0\1\154\1\155\53\0\1\117\4\0\1\57\1\156"+
    "\13\0\1\120\3\0\2\117\3\0\1\57\1\156\41\0"+
    "\1\157\74\0\1\160\1\0\12\160\56\0\3\4\2\0"+
    "\10\4\3\0\12\4\3\0\2\4\3\0\1\4\2\0"+
    "\1\161\11\4\16\0\3\4\2\0\6\4\1\162\1\4"+
    "\3\0\12\4\3\0\2\4\3\0\1\4\2\0\12\4"+
    "\16\0\3\4\2\0\10\4\3\0\12\4\3\0\2\4"+
    "\3\0\1\4\2\0\5\4\1\163\4\4\16\0\3\4"+
    "\2\0\2\4\1\164\5\4\3\0\12\4\3\0\2\4"+
    "\3\0\1\4\2\0\12\4\16\0\3\4\2\0\10\4"+
    "\3\0\12\4\3\0\2\4\3\0\1\4\2\0\1\4"+
    "\1\165\10\4\16\0\3\4\2\0\10\4\3\0\12\4"+
    "\3\0\2\4\3\0\1\4\2\0\1\166\11\4\16\0"+
    "\3\4\2\0\10\4\3\0\12\4\3\0\2\4\3\0"+
    "\1\167\2\0\12\4\16\0\3\4\2\0\6\4\1\170"+
    "\1\4\3\0\12\4\3\0\2\4\3\0\1\4\2\0"+
    "\12\4\16\0\3\4\2\0\4\4\1\171\3\4\3\0"+
    "\12\4\3\0\2\4\3\0\1\4\2\0\12\4\16\0"+
    "\3\4\2\0\10\4\3\0\12\4\3\0\2\4\3\0"+
    "\1\4\2\0\1\4\1\172\10\4\16\0\3\4\2\0"+
    "\5\4\1\173\2\4\3\0\12\4\3\0\2\4\3\0"+
    "\1\4\2\0\12\4\16\0\3\4\2\0\6\4\1\174"+
    "\1\4\3\0\12\4\3\0\2\4\3\0\1\4\2\0"+
    "\12\4\16\0\3\4\2\0\6\4\1\175\1\4\3\0"+
    "\12\4\3\0\2\4\3\0\1\4\2\0\3\4\1\176"+
    "\4\4\1\177\1\4\16\0\3\4\2\0\10\4\3\0"+
    "\12\4\3\0\2\4\3\0\1\4\2\0\2\4\1\200"+
    "\7\4\16\0\3\4\2\0\6\4\1\201\1\4\3\0"+
    "\12\4\3\0\2\4\3\0\1\4\2\0\12\4\16\0"+
    "\3\4\2\0\4\4\1\202\3\4\3\0\12\4\3\0"+
    "\2\4\3\0\1\4\2\0\12\4\42\0\1\203\3\0"+
    "\1\203\64\0\1\60\1\61\1\62\1\63\1\110\3\0"+
    "\2\110\44\0\2\204\2\0\4\204\13\0\1\204\2\0"+
    "\3\204\3\0\2\204\6\0\1\204\2\0\1\204\26\0"+
    "\1\117\4\0\1\57\1\156\13\0\1\117\3\0\2\117"+
    "\3\0\1\57\1\156\45\0\1\57\1\156\24\0\1\57"+
    "\1\156\36\0\3\4\2\0\5\4\1\205\2\4\3\0"+
    "\12\4\3\0\2\4\3\0\1\4\2\0\12\4\16\0"+
    "\3\4\2\0\10\4\3\0\12\4\3\0\2\4\3\0"+
    "\1\4\2\0\11\4\1\206\16\0\3\4\2\0\10\4"+
    "\3\0\12\4\3\0\2\4\3\0\1\4\2\0\2\4"+
    "\1\207\7\4\15\0\40\124\1\17\1\26\33\124\45\210"+
    "\1\211\27\210\1\0\3\4\2\0\3\4\1\212\4\4"+
    "\3\0\12\4\3\0\2\4\3\0\1\4\2\0\12\4"+
    "\16\0\3\4\2\0\10\4\3\0\1\213\11\4\3\0"+
    "\2\4\3\0\1\4\2\0\12\4\16\0\3\4\2\0"+
    "\6\4\1\214\1\4\3\0\12\4\3\0\2\4\3\0"+
    "\1\4\2\0\12\4\16\0\3\4\2\0\10\4\3\0"+
    "\12\4\3\0\2\4\3\0\1\215\2\0\12\4\16\0"+
    "\3\4\2\0\4\4\1\216\3\4\3\0\12\4\3\0"+
    "\2\4\3\0\1\4\2\0\12\4\16\0\3\4\2\0"+
    "\1\217\7\4\3\0\12\4\3\0\2\4\3\0\1\4"+
    "\2\0\12\4\20\0\1\151\5\0\1\156\13\0\1\151"+
    "\3\0\2\151\4\0\1\156\46\0\1\156\25\0\1\156"+
    "\40\0\1\151\21\0\1\152\3\0\2\151\65\0\2\154"+
    "\54\0\1\220\71\0\3\4\2\0\10\4\3\0\12\4"+
    "\3\0\2\4\3\0\1\4\2\0\1\4\1\221\10\4"+
    "\16\0\3\4\2\0\10\4\3\0\12\4\3\0\2\4"+
    "\3\0\1\4\2\0\2\4\1\222\7\4\16\0\3\4"+
    "\2\0\1\223\7\4\3\0\12\4\3\0\2\4\3\0"+
    "\1\4\2\0\12\4\16\0\3\4\2\0\10\4\3\0"+
    "\2\4\1\224\7\4\3\0\2\4\3\0\1\4\2\0"+
    "\12\4\16\0\3\4\2\0\2\4\1\225\5\4\3\0"+
    "\12\4\3\0\2\4\3\0\1\4\2\0\12\4\16\0"+
    "\3\4\2\0\2\4\1\226\5\4\3\0\12\4\3\0"+
    "\2\4\3\0\1\4\2\0\12\4\16\0\3\4\2\0"+
    "\10\4\3\0\12\4\3\0\2\4\3\0\1\4\2\0"+
    "\3\4\1\227\6\4\16\0\3\4\2\0\1\230\7\4"+
    "\3\0\12\4\3\0\2\4\3\0\1\4\2\0\12\4"+
    "\16\0\3\4\2\0\2\4\1\231\5\4\3\0\12\4"+
    "\3\0\2\4\3\0\1\4\2\0\12\4\16\0\3\4"+
    "\2\0\10\4\3\0\1\232\11\4\3\0\2\4\3\0"+
    "\1\4\2\0\12\4\16\0\3\4\2\0\10\4\3\0"+
    "\12\4\3\0\2\4\3\0\1\4\2\0\1\4\1\233"+
    "\10\4\16\0\3\4\2\0\2\4\1\234\5\4\3\0"+
    "\12\4\3\0\2\4\3\0\1\4\2\0\12\4\16\0"+
    "\3\4\2\0\10\4\3\0\12\4\3\0\2\4\3\0"+
    "\1\4\2\0\1\235\11\4\16\0\3\4\2\0\10\4"+
    "\3\0\12\4\3\0\2\4\3\0\1\4\2\0\2\4"+
    "\1\236\7\4\16\0\3\4\2\0\10\4\3\0\12\4"+
    "\3\0\2\4\3\0\1\4\2\0\5\4\1\237\4\4"+
    "\36\0\1\60\1\61\1\62\1\63\1\203\3\0\1\203"+
    "\45\0\2\204\2\0\4\204\7\0\1\60\1\61\1\62"+
    "\1\63\1\204\2\0\3\204\3\0\2\204\6\0\1\204"+
    "\2\0\1\204\24\0\3\4\2\0\10\4\3\0\12\4"+
    "\3\0\2\4\3\0\1\4\2\0\2\4\1\240\7\4"+
    "\16\0\3\4\2\0\2\4\1\241\5\4\3\0\12\4"+
    "\3\0\2\4\3\0\1\4\2\0\12\4\16\0\3\4"+
    "\2\0\6\4\1\242\1\4\3\0\12\4\3\0\2\4"+
    "\3\0\1\4\2\0\12\4\15\0\45\210\1\243\27\210"+
    "\44\0\1\17\1\211\30\0\3\4\2\0\1\244\7\4"+
    "\3\0\12\4\3\0\2\4\3\0\1\4\2\0\12\4"+
    "\16\0\3\4\2\0\1\4\1\245\6\4\3\0\12\4"+
    "\3\0\2\4\3\0\1\4\2\0\12\4\16\0\3\4"+
    "\2\0\2\4\1\246\5\4\3\0\12\4\3\0\2\4"+
    "\3\0\1\4\2\0\12\4\16\0\3\4\2\0\6\4"+
    "\1\247\1\4\3\0\12\4\3\0\2\4\3\0\1\250"+
    "\2\0\12\4\16\0\3\4\2\0\5\4\1\251\2\4"+
    "\3\0\12\4\3\0\2\4\3\0\1\4\2\0\12\4"+
    "\16\0\3\4\2\0\4\4\1\252\3\4\3\0\12\4"+
    "\3\0\2\4\3\0\1\4\2\0\12\4\16\0\3\4"+
    "\2\0\10\4\3\0\12\4\3\0\2\4\3\0\1\4"+
    "\2\0\4\4\1\253\5\4\16\0\3\4\2\0\5\4"+
    "\1\254\2\4\3\0\12\4\3\0\2\4\3\0\1\4"+
    "\2\0\12\4\16\0\3\4\2\0\6\4\1\255\1\4"+
    "\3\0\12\4\3\0\2\4\3\0\1\4\2\0\12\4"+
    "\16\0\3\4\2\0\6\4\1\256\1\4\3\0\12\4"+
    "\3\0\2\4\3\0\1\4\2\0\12\4\16\0\3\4"+
    "\2\0\1\257\7\4\3\0\12\4\3\0\2\4\3\0"+
    "\1\4\2\0\12\4\16\0\3\4\2\0\5\4\1\260"+
    "\2\4\3\0\12\4\3\0\2\4\3\0\1\4\2\0"+
    "\12\4\16\0\3\4\2\0\5\4\1\261\2\4\3\0"+
    "\12\4\3\0\2\4\3\0\1\4\2\0\12\4\16\0"+
    "\3\4\2\0\1\262\7\4\3\0\12\4\3\0\2\4"+
    "\3\0\1\4\2\0\12\4\16\0\3\4\2\0\10\4"+
    "\3\0\2\4\1\263\7\4\3\0\2\4\3\0\1\4"+
    "\2\0\12\4\16\0\3\4\2\0\4\4\1\264\3\4"+
    "\3\0\12\4\3\0\2\4\3\0\1\4\2\0\12\4"+
    "\16\0\3\4\2\0\10\4\3\0\12\4\3\0\2\4"+
    "\3\0\1\4\2\0\1\4\1\265\10\4\16\0\3\4"+
    "\2\0\10\4\3\0\12\4\3\0\2\4\3\0\1\4"+
    "\2\0\3\4\1\266\6\4\15\0\44\210\1\17\1\243"+
    "\27\210\1\0\3\4\2\0\10\4\3\0\1\267\11\4"+
    "\3\0\2\4\3\0\1\4\2\0\12\4\16\0\3\4"+
    "\2\0\10\4\3\0\2\4\1\270\7\4\3\0\2\4"+
    "\3\0\1\4\2\0\12\4\16\0\3\4\2\0\10\4"+
    "\3\0\12\4\3\0\2\4\3\0\1\4\2\0\2\4"+
    "\1\271\7\4\16\0\3\4\2\0\6\4\1\272\1\4"+
    "\3\0\12\4\3\0\2\4\3\0\1\4\2\0\12\4"+
    "\16\0\3\4\2\0\4\4\1\273\3\4\3\0\12\4"+
    "\3\0\2\4\3\0\1\4\2\0\12\4\16\0\3\4"+
    "\2\0\10\4\3\0\12\4\3\0\2\4\3\0\1\4"+
    "\2\0\2\4\1\274\7\4\16\0\3\4\2\0\10\4"+
    "\3\0\12\4\3\0\2\4\3\0\1\4\2\0\3\4"+
    "\1\275\6\4\16\0\3\4\2\0\4\4\1\276\3\4"+
    "\3\0\12\4\3\0\2\4\3\0\1\4\2\0\12\4"+
    "\16\0\3\4\2\0\10\4\3\0\12\4\3\0\2\4"+
    "\3\0\1\4\2\0\1\277\11\4\16\0\3\4\2\0"+
    "\6\4\1\300\1\4\3\0\12\4\3\0\2\4\3\0"+
    "\1\4\2\0\12\4\16\0\3\4\2\0\10\4\3\0"+
    "\12\4\3\0\2\4\3\0\1\4\2\0\5\4\1\301"+
    "\4\4\16\0\3\4\2\0\3\4\1\302\4\4\3\0"+
    "\12\4\3\0\2\4\3\0\1\4\2\0\12\4\16\0"+
    "\3\4\2\0\10\4\3\0\12\4\3\0\2\4\3\0"+
    "\1\4\2\0\7\4\1\303\2\4\16\0\3\4\2\0"+
    "\10\4\3\0\2\4\1\304\7\4\3\0\2\4\3\0"+
    "\1\4\2\0\12\4\16\0\3\4\2\0\2\4\1\305"+
    "\5\4\3\0\12\4\3\0\2\4\3\0\1\4\2\0"+
    "\12\4\16\0\3\4\2\0\4\4\1\306\3\4\3\0"+
    "\12\4\3\0\2\4\3\0\1\4\2\0\12\4\16\0"+
    "\3\4\2\0\10\4\3\0\12\4\3\0\2\4\3\0"+
    "\1\4\2\0\1\4\1\307\10\4\16\0\3\4\2\0"+
    "\10\4\3\0\12\4\3\0\2\4\3\0\1\4\2\0"+
    "\7\4\1\310\2\4\16\0\3\4\2\0\6\4\1\311"+
    "\1\4\3\0\12\4\3\0\2\4\3\0\1\4\2\0"+
    "\12\4\16\0\3\4\2\0\10\4\3\0\1\312\11\4"+
    "\3\0\2\4\3\0\1\4\2\0\12\4\16\0\3\4"+
    "\2\0\4\4\1\313\3\4\3\0\12\4\3\0\2\4"+
    "\3\0\1\4\2\0\12\4\16\0\3\4\2\0\2\4"+
    "\1\314\5\4\3\0\12\4\3\0\2\4\3\0\1\4"+
    "\2\0\12\4\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8601];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\12\1\2\11\7\1\1\11\7\1\11\11"+
    "\6\1\1\11\1\0\5\1\2\0\20\1\1\0\1\1"+
    "\1\0\1\11\1\0\3\11\5\1\2\0\2\11\11\1"+
    "\10\11\2\1\1\0\1\11\1\1\2\11\1\0\27\1"+
    "\2\0\6\1\1\11\22\1\1\0\51\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuilder string = new StringBuilder();
    ComplexSymbolFactory symbolFactory;
    public MyScanner(java.io.Reader in, ComplexSymbolFactory sf){
	this(in);
	symbolFactory = sf;
    }

    private Symbol symbol(int sym) {
      return symbolFactory.newSymbol("sym", sym, new Location(yyline+1,yycolumn+1,yychar), new Location(yyline+1,yycolumn+yylength(),yychar+yylength()));
  }
  private Symbol symbol(int sym, Object val) {
      Location left = new Location(yyline+1,yycolumn+1,yychar);
      Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
      return symbolFactory.newSymbol("sym", sym, left, right,val);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MyScanner(java.io.Reader in) {
      //TODO
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <"+
                                            yytext()+">");
            } 
            // fall through
          case 75: break;
          case 2: 
            { return symbol(sym.ID, yytext());
            } 
            // fall through
          case 76: break;
          case 3: 
            { return symbol(sym.INT_CONST, Integer.valueOf(yytext()));
            } 
            // fall through
          case 77: break;
          case 4: 
            { string.setLength(0); yybegin(String);
            } 
            // fall through
          case 78: break;
          case 5: 
            { 
            } 
            // fall through
          case 79: break;
          case 6: 
            { return symbol(sym.PLUS);
            } 
            // fall through
          case 80: break;
          case 7: 
            { return symbol(sym.MINUS);
            } 
            // fall through
          case 81: break;
          case 8: 
            { return symbol(sym.DOT);
            } 
            // fall through
          case 82: break;
          case 9: 
            { return symbol(sym.BOOL_CONST, Boolean.valueOf(yytext()));
            } 
            // fall through
          case 83: break;
          case 10: 
            { return symbol(sym.SEMCOLON);
            } 
            // fall through
          case 84: break;
          case 11: 
            { return symbol(sym.OPENPAR);
            } 
            // fall through
          case 85: break;
          case 12: 
            { return symbol(sym.CLOSEPAR);
            } 
            // fall through
          case 86: break;
          case 13: 
            { return symbol(sym.COMMA);
            } 
            // fall through
          case 87: break;
          case 14: 
            { return symbol(sym.XOR);
            } 
            // fall through
          case 88: break;
          case 15: 
            { return symbol(sym.TILDE);
            } 
            // fall through
          case 89: break;
          case 16: 
            { return symbol(sym.COLON);
            } 
            // fall through
          case 90: break;
          case 17: 
            { return symbol(sym.OPENBRAC);
            } 
            // fall through
          case 91: break;
          case 18: 
            { return symbol(sym.CLOSEBRAC);
            } 
            // fall through
          case 92: break;
          case 19: 
            { return symbol(sym.EQ);
            } 
            // fall through
          case 93: break;
          case 20: 
            { return symbol(sym.LT);
            } 
            // fall through
          case 94: break;
          case 21: 
            { string.append(yytext());
            } 
            // fall through
          case 95: break;
          case 22: 
            { string.append("\\");
            } 
            // fall through
          case 96: break;
          case 23: 
            { yybegin(YYINITIAL);
                              return symbol(sym.STRING_CONST, string.toString());
            } 
            // fall through
          case 97: break;
          case 24: 
            { return symbol(sym.LONG_CONST, Long.valueOf(yytext()));
            } 
            // fall through
          case 98: break;
          case 25: 
            { return symbol(sym.REAL_CONST, Double.valueOf(yytext()));
            } 
            // fall through
          case 99: break;
          case 26: 
            { return symbol(sym.PLUSPLUS);
            } 
            // fall through
          case 100: break;
          case 27: 
            { return symbol(sym.PLUSEQ);
            } 
            // fall through
          case 101: break;
          case 28: 
            { return symbol(sym.MINMIN);
            } 
            // fall through
          case 102: break;
          case 29: 
            { return symbol(sym.MINUSEQ);
            } 
            // fall through
          case 103: break;
          case 30: 
            { return symbol(sym.DIVEQ);
            } 
            // fall through
          case 104: break;
          case 31: 
            { return symbol(sym.MULTEQ);
            } 
            // fall through
          case 105: break;
          case 32: 
            { return symbol(sym.OF);
            } 
            // fall through
          case 106: break;
          case 33: 
            { return symbol(sym.ARITOR);
            } 
            // fall through
          case 107: break;
          case 34: 
            { return symbol(sym.IF);
            } 
            // fall through
          case 108: break;
          case 35: 
            { return symbol(sym.IN);
            } 
            // fall through
          case 109: break;
          case 36: 
            { return symbol(sym.EQEQ);
            } 
            // fall through
          case 110: break;
          case 37: 
            { return symbol(sym.INEQ);
            } 
            // fall through
          case 111: break;
          case 38: 
            { return symbol(sym.LTEQ);
            } 
            // fall through
          case 112: break;
          case 39: 
            { return symbol(sym.GTEQ);
            } 
            // fall through
          case 113: break;
          case 40: 
            { string.append("\\n");
            } 
            // fall through
          case 114: break;
          case 41: 
            { string.append("\\r");
            } 
            // fall through
          case 115: break;
          case 42: 
            { string.append("\\t");
            } 
            // fall through
          case 116: break;
          case 43: 
            { string.append("\\\"");
            } 
            // fall through
          case 117: break;
          case 44: 
            { String str = yytext();
                                  str = str.substring(1, str.length() - 1);
                                  return symbol(sym.CHAR_CONST, str.charAt(0));
            } 
            // fall through
          case 118: break;
          case 45: 
            { return symbol(sym.ARITAND);
            } 
            // fall through
          case 119: break;
          case 46: 
            { return symbol(sym.END);
            } 
            // fall through
          case 120: break;
          case 47: 
            { return symbol(sym.FOR);
            } 
            // fall through
          case 121: break;
          case 48: 
            { return symbol(sym.NOT);
            } 
            // fall through
          case 122: break;
          case 49: 
            { return symbol(sym.INT);
            } 
            // fall through
          case 123: break;
          case 50: 
            { String str = yytext();
                            if(yytext().length() > 1) // has single quotes
                                str = str.substring(1, str.length() - 1);
                           return symbol(sym.CHAR_CONST, str);
            } 
            // fall through
          case 124: break;
          case 51: 
            { return symbol(sym.AUTO);
            } 
            // fall through
          case 125: break;
          case 52: 
            { return symbol(sym.BOOL);
            } 
            // fall through
          case 126: break;
          case 53: 
            { return symbol(sym.ELSE);
            } 
            // fall through
          case 127: break;
          case 54: 
            { return symbol(sym.VOID);
            } 
            // fall through
          case 128: break;
          case 55: 
            { return symbol(sym.LONG);
            } 
            // fall through
          case 129: break;
          case 56: 
            { return symbol(sym.CASE);
            } 
            // fall through
          case 130: break;
          case 57: 
            { return symbol(sym.CHAR);
            } 
            // fall through
          case 131: break;
          case 58: 
            { return symbol(sym.BEGIN);
            } 
            // fall through
          case 132: break;
          case 59: 
            { return symbol(sym.BREAK);
            } 
            // fall through
          case 133: break;
          case 60: 
            { return symbol(sym.FLOAT);
            } 
            // fall through
          case 134: break;
          case 61: 
            { return symbol(sym.UNTIL);
            } 
            // fall through
          case 135: break;
          case 62: 
            { return symbol(sym.CONST);
            } 
            // fall through
          case 136: break;
          case 63: 
            { return symbol(sym.EXTERN);
            } 
            // fall through
          case 137: break;
          case 64: 
            { return symbol(sym.RETURN);
            } 
            // fall through
          case 138: break;
          case 65: 
            { return symbol(sym.RECORD);
            } 
            // fall through
          case 139: break;
          case 66: 
            { return symbol(sym.REPEAT);
            } 
            // fall through
          case 140: break;
          case 67: 
            { return symbol(sym.STRING);
            } 
            // fall through
          case 141: break;
          case 68: 
            { return symbol(sym.SIZEOF);
            } 
            // fall through
          case 142: break;
          case 69: 
            { return symbol(sym.SWITCH);
            } 
            // fall through
          case 143: break;
          case 70: 
            { return symbol(sym.DOUBLE);
            } 
            // fall through
          case 144: break;
          case 71: 
            { return symbol(sym.FOREACH);
            } 
            // fall through
          case 145: break;
          case 72: 
            { return symbol(sym.DEFAULT);
            } 
            // fall through
          case 146: break;
          case 73: 
            { return symbol(sym.FUNCTION);
            } 
            // fall through
          case 147: break;
          case 74: 
            { return symbol(sym.CONTINUE);
            } 
            // fall through
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
