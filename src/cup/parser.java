
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jul 14 21:57:52 IRDT 2019
//----------------------------------------------------

package cup;

import java.util.*;
import byteCode.Node;
import byteCode.Program;
import byteCode.block.Block;
import byteCode.declaration.function.FuncArg;
import byteCode.declaration.function.FunctionDeclaration;
import byteCode.declaration.var.Dcls;
import byteCode.declaration.var.SpecClass;
import byteCode.declaration.var.StructDcl;
import byteCode.exp.Exp;
import byteCode.exp.binExp.arith.*;
import byteCode.exp.binExp.cond.*;
import byteCode.exp.constant.*;
import byteCode.exp.unExp.*;
import byteCode.exp.var.ArrVarExp;
import byteCode.exp.var.RecordVarExp;
import byteCode.exp.var.SmplVarExp;
import byteCode.exp.var.Var;
import byteCode.statement.*;
import byteCode.statement.assignments.*;
import byteCode.statement.cond.Case;
import byteCode.statement.cond.If;
import byteCode.statement.cond.Switch;
import byteCode.statement.loop.For;
import byteCode.statement.loop.ForEach;
import byteCode.statement.loop.Repeat;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jul 14 21:57:52 IRDT 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\033\004\000\002\033" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\031\003\000\002\031\003\000\002\027\011\000" +
    "\002\027\010\000\002\027\011\000\002\027\010\000\002" +
    "\022\005\000\002\022\007\000\002\021\005\000\002\021" +
    "\002\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\032\006\000\002\026\011\000\002\020" +
    "\004\000\002\020\003\000\002\017\005\000\002\017\006" +
    "\000\002\015\005\000\002\015\003\000\002\016\003\000" +
    "\002\016\005\000\002\016\004\000\002\006\005\000\002" +
    "\014\004\000\002\014\004\000\002\014\002\000\002\024" +
    "\004\000\002\024\004\000\002\024\003\000\002\024\003" +
    "\000\002\024\005\000\002\024\004\000\002\024\004\000" +
    "\002\024\004\000\002\013\006\000\002\013\005\000\002" +
    "\012\003\000\002\012\005\000\002\010\007\000\002\010" +
    "\011\000\002\010\016\000\002\007\007\000\002\007\002" +
    "\000\002\011\013\000\002\011\013\000\002\011\012\000" +
    "\002\011\012\000\002\011\012\000\002\011\011\000\002" +
    "\011\011\000\002\011\011\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\004\000\002\002\004\000\002" +
    "\002\004\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\006\000\002\002\003" +
    "\000\002\002\003\000\002\004\006\000\002\004\005\000" +
    "\002\005\003\000\002\005\005\000\002\005\004\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\036\004\004\005\013\014\017\015\022\016" +
    "\006\017\027\020\021\021\005\022\010\023\031\024\020" +
    "\025\030\026\024\027\023\001\002\000\026\014\017\015" +
    "\022\016\006\017\027\020\021\021\005\022\010\023\031" +
    "\024\020\025\030\001\002\000\006\014\uffee\061\uffee\001" +
    "\002\000\006\014\ufff1\061\ufff1\001\002\000\040\002\ufffa" +
    "\004\ufffa\005\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020" +
    "\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa" +
    "\027\ufffa\001\002\000\006\014\uffed\061\uffed\001\002\000" +
    "\004\014\033\001\002\000\040\002\ufffc\004\ufffc\005\ufffc" +
    "\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022" +
    "\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\001\002" +
    "\000\026\014\017\015\022\016\006\017\027\020\021\021" +
    "\005\022\010\023\031\024\020\025\030\001\002\000\040" +
    "\002\uffff\004\004\005\013\014\017\015\022\016\006\017" +
    "\027\020\021\021\005\022\010\023\031\024\020\025\030" +
    "\026\024\027\023\001\002\000\040\002\ufffb\004\ufffb\005" +
    "\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\001" +
    "\002\000\004\002\157\001\002\000\006\014\uffeb\061\uffeb" +
    "\001\002\000\006\014\uffea\061\uffea\001\002\000\006\014" +
    "\uffef\061\uffef\001\002\000\006\014\uffe8\061\uffe8\001\002" +
    "\000\004\014\147\001\002\000\026\014\017\015\022\016" +
    "\006\017\027\020\021\021\005\022\010\023\031\024\020" +
    "\025\030\001\002\000\040\002\ufffe\004\ufffe\005\ufffe\014" +
    "\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe" +
    "\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\001\002\000" +
    "\040\002\ufffd\004\ufffd\005\ufffd\014\ufffd\015\ufffd\016\ufffd" +
    "\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025" +
    "\ufffd\026\ufffd\027\ufffd\001\002\000\006\014\ufff0\061\ufff0" +
    "\001\002\000\006\014\uffe9\061\uffe9\001\002\000\006\014" +
    "\uffec\061\uffec\001\002\000\004\014\033\001\002\000\012" +
    "\033\uffdf\034\042\053\uffdf\063\041\001\002\000\004\053" +
    "\040\001\002\000\006\033\036\053\uffe0\001\002\000\004" +
    "\014\033\001\002\000\004\053\uffe1\001\002\000\062\002" +
    "\uffe2\004\uffe2\005\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\041\uffe2\043\uffe2" +
    "\047\uffe2\052\uffe2\054\uffe2\056\uffe2\001\002\000\036\006" +
    "\052\007\057\010\044\011\061\012\046\013\054\014\060" +
    "\060\053\062\050\066\056\071\064\072\051\074\045\114" +
    "\062\001\002\000\036\006\052\007\057\010\044\011\061" +
    "\012\046\013\054\014\060\060\053\062\050\066\056\071" +
    "\064\072\051\074\045\114\062\001\002\000\006\033\uffdd" +
    "\053\uffdd\001\002\000\052\033\uff95\053\uff95\061\uff95\064" +
    "\uff95\073\uff95\074\uff95\075\uff95\076\uff95\077\uff95\100\uff95" +
    "\101\uff95\102\uff95\104\uff95\105\uff95\106\uff95\107\uff95\110" +
    "\uff95\111\uff95\112\uff95\113\uff95\001\002\000\036\006\052" +
    "\007\057\010\044\011\061\012\046\013\054\014\060\060" +
    "\053\062\050\066\056\071\064\072\051\074\045\114\062" +
    "\001\002\000\052\033\uff99\053\uff99\061\uff99\064\uff99\073" +
    "\uff99\074\uff99\075\uff99\076\uff99\077\uff99\100\uff99\101\uff99" +
    "\102\uff99\104\uff99\105\uff99\106\uff99\107\uff99\110\uff99\111" +
    "\uff99\112\uff99\113\uff99\001\002\000\052\033\uffa0\053\uffa0" +
    "\061\uffa0\064\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0\077" +
    "\uffa0\100\uffa0\101\uffa0\102\uffa0\104\uffa0\105\uffa0\106\uffa0" +
    "\107\uffa0\110\uffa0\111\uffa0\112\uffa0\113\uffa0\001\002\000" +
    "\004\060\140\001\002\000\004\014\060\001\002\000\052" +
    "\033\uff9a\053\uff9a\061\uff9a\064\uff9a\073\uff9a\074\uff9a\075" +
    "\uff9a\076\uff9a\077\uff9a\100\uff9a\101\uff9a\102\uff9a\104\uff9a" +
    "\105\uff9a\106\uff9a\107\uff9a\110\uff9a\111\uff9a\112\uff9a\113" +
    "\uff9a\001\002\000\036\006\052\007\057\010\044\011\061" +
    "\012\046\013\054\014\060\060\053\062\050\066\056\071" +
    "\064\072\051\074\045\114\062\001\002\000\052\033\uff96" +
    "\053\uff96\061\uff96\064\uff96\073\uff96\074\uff96\075\uff96\076" +
    "\uff96\077\uff96\100\uff96\101\uff96\102\uff96\104\uff96\105\uff96" +
    "\106\uff96\107\uff96\110\uff96\111\uff96\112\uff96\113\uff96\001" +
    "\002\000\060\033\uffa1\053\uffa1\061\uffa1\064\uffa1\065\066" +
    "\071\133\072\134\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077" +
    "\uffa1\100\uffa1\101\uffa1\102\uffa1\104\uffa1\105\uffa1\106\uffa1" +
    "\107\uffa1\110\uffa1\111\uffa1\112\uffa1\113\uffa1\001\002\000" +
    "\036\006\052\007\057\010\044\011\061\012\046\013\054" +
    "\014\060\060\053\062\050\066\056\071\064\072\051\074" +
    "\045\114\062\001\002\000\052\033\uff97\053\uff97\061\uff97" +
    "\064\uff97\073\uff97\074\uff97\075\uff97\076\uff97\077\uff97\100" +
    "\uff97\101\uff97\102\uff97\104\uff97\105\uff97\106\uff97\107\uff97" +
    "\110\uff97\111\uff97\112\uff97\113\uff97\001\002\000\074\033" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\053\uff9d" +
    "\061\uff9d\063\041\064\uff9d\065\uff9d\071\uff9d\072\uff9d\073" +
    "\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d\100\uff9d\101\uff9d" +
    "\102\uff9d\104\uff9d\105\uff9d\106\uff9d\107\uff9d\110\uff9d\111" +
    "\uff9d\112\uff9d\113\uff9d\001\002\000\052\033\uff98\053\uff98" +
    "\061\uff98\064\uff98\073\uff98\074\uff98\075\uff98\076\uff98\077" +
    "\uff98\100\uff98\101\uff98\102\uff98\104\uff98\105\uff98\106\uff98" +
    "\107\uff98\110\uff98\111\uff98\112\uff98\113\uff98\001\002\000" +
    "\036\006\052\007\057\010\044\011\061\012\046\013\054" +
    "\014\060\060\053\062\050\066\056\071\064\072\051\074" +
    "\045\114\062\001\002\000\046\033\uffde\053\uffde\073\101" +
    "\074\070\075\076\076\102\077\077\100\071\101\104\102" +
    "\073\104\074\105\100\106\075\107\106\110\103\111\105" +
    "\112\072\113\107\001\002\000\004\014\060\001\002\000" +
    "\054\033\uffa4\053\uffa4\061\uffa4\064\uffa4\065\066\073\uffa4" +
    "\074\uffa4\075\uffa4\076\uffa4\077\uffa4\100\uffa4\101\uffa4\102" +
    "\uffa4\104\uffa4\105\uffa4\106\uffa4\107\uffa4\110\uffa4\111\uffa4" +
    "\112\uffa4\113\uffa4\001\002\000\004\014\067\001\002\000" +
    "\072\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c" +
    "\053\uff9c\061\uff9c\064\uff9c\065\uff9c\071\uff9c\072\uff9c\073" +
    "\uff9c\074\uff9c\075\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c" +
    "\102\uff9c\104\uff9c\105\uff9c\106\uff9c\107\uff9c\110\uff9c\111" +
    "\uff9c\112\uff9c\113\uff9c\001\002\000\036\006\052\007\057" +
    "\010\044\011\061\012\046\013\054\014\060\060\053\062" +
    "\050\066\056\071\064\072\051\074\045\114\062\001\002" +
    "\000\036\006\052\007\057\010\044\011\061\012\046\013" +
    "\054\014\060\060\053\062\050\066\056\071\064\072\051" +
    "\074\045\114\062\001\002\000\036\006\052\007\057\010" +
    "\044\011\061\012\046\013\054\014\060\060\053\062\050" +
    "\066\056\071\064\072\051\074\045\114\062\001\002\000" +
    "\036\006\052\007\057\010\044\011\061\012\046\013\054" +
    "\014\060\060\053\062\050\066\056\071\064\072\051\074" +
    "\045\114\062\001\002\000\036\006\052\007\057\010\044" +
    "\011\061\012\046\013\054\014\060\060\053\062\050\066" +
    "\056\071\064\072\051\074\045\114\062\001\002\000\036" +
    "\006\052\007\057\010\044\011\061\012\046\013\054\014" +
    "\060\060\053\062\050\066\056\071\064\072\051\074\045" +
    "\114\062\001\002\000\036\006\052\007\057\010\044\011" +
    "\061\012\046\013\054\014\060\060\053\062\050\066\056" +
    "\071\064\072\051\074\045\114\062\001\002\000\036\006" +
    "\052\007\057\010\044\011\061\012\046\013\054\014\060" +
    "\060\053\062\050\066\056\071\064\072\051\074\045\114" +
    "\062\001\002\000\036\006\052\007\057\010\044\011\061" +
    "\012\046\013\054\014\060\060\053\062\050\066\056\071" +
    "\064\072\051\074\045\114\062\001\002\000\036\006\052" +
    "\007\057\010\044\011\061\012\046\013\054\014\060\060" +
    "\053\062\050\066\056\071\064\072\051\074\045\114\062" +
    "\001\002\000\036\006\052\007\057\010\044\011\061\012" +
    "\046\013\054\014\060\060\053\062\050\066\056\071\064" +
    "\072\051\074\045\114\062\001\002\000\036\006\052\007" +
    "\057\010\044\011\061\012\046\013\054\014\060\060\053" +
    "\062\050\066\056\071\064\072\051\074\045\114\062\001" +
    "\002\000\036\006\052\007\057\010\044\011\061\012\046" +
    "\013\054\014\060\060\053\062\050\066\056\071\064\072" +
    "\051\074\045\114\062\001\002\000\036\006\052\007\057" +
    "\010\044\011\061\012\046\013\054\014\060\060\053\062" +
    "\050\066\056\071\064\072\051\074\045\114\062\001\002" +
    "\000\036\006\052\007\057\010\044\011\061\012\046\013" +
    "\054\014\060\060\053\062\050\066\056\071\064\072\051" +
    "\074\045\114\062\001\002\000\036\006\052\007\057\010" +
    "\044\011\061\012\046\013\054\014\060\060\053\062\050" +
    "\066\056\071\064\072\051\074\045\114\062\001\002\000" +
    "\052\033\uffab\053\uffab\061\uffab\064\uffab\073\101\074\070" +
    "\075\076\076\102\077\077\100\uffab\101\uffab\102\uffab\104" +
    "\074\105\100\106\075\107\106\110\103\111\105\112\072" +
    "\113\uffab\001\002\000\052\033\uffaf\053\uffaf\061\uffaf\064" +
    "\uffaf\073\101\074\070\075\076\076\102\077\077\100\uffaf" +
    "\101\uffaf\102\uffaf\104\uffaf\105\uffaf\106\uffaf\107\uffaf\110" +
    "\uffaf\111\uffaf\112\uffaf\113\uffaf\001\002\000\052\033\uffad" +
    "\053\uffad\061\uffad\064\uffad\073\101\074\070\075\076\076" +
    "\102\077\077\100\uffad\101\uffad\102\uffad\104\uffad\105\uffad" +
    "\106\uffad\107\uffad\110\uffad\111\uffad\112\uffad\113\uffad\001" +
    "\002\000\052\033\uffb6\053\uffb6\061\uffb6\064\uffb6\073\101" +
    "\074\070\075\076\076\102\077\077\100\071\101\uffb6\102" +
    "\073\104\074\105\100\106\075\107\106\110\103\111\105" +
    "\112\072\113\107\001\002\000\052\033\uffae\053\uffae\061" +
    "\uffae\064\uffae\073\101\074\070\075\076\076\102\077\077" +
    "\100\uffae\101\uffae\102\uffae\104\uffae\105\uffae\106\uffae\107" +
    "\uffae\110\uffae\111\uffae\112\uffae\113\uffae\001\002\000\052" +
    "\033\uffb7\053\uffb7\061\uffb7\064\uffb7\073\uffb7\074\uffb7\075" +
    "\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7\104\uffb7" +
    "\105\uffb7\106\uffb7\107\uffb7\110\uffb7\111\uffb7\112\uffb7\113" +
    "\uffb7\001\002\000\052\033\uffba\053\uffba\061\uffba\064\uffba" +
    "\073\uffba\074\uffba\075\076\076\102\077\077\100\uffba\101" +
    "\uffba\102\uffba\104\uffba\105\uffba\106\uffba\107\uffba\110\uffba" +
    "\111\uffba\112\uffba\113\uffba\001\002\000\052\033\uffb1\053" +
    "\uffb1\061\uffb1\064\uffb1\073\101\074\070\075\076\076\102" +
    "\077\077\100\uffb1\101\uffb1\102\uffb1\104\uffb1\105\uffb1\106" +
    "\075\107\106\110\103\111\105\112\uffb1\113\uffb1\001\002" +
    "\000\052\033\uffb4\053\uffb4\061\uffb4\064\uffb4\073\uffb4\074" +
    "\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4" +
    "\104\uffb4\105\uffb4\106\uffb4\107\uffb4\110\uffb4\111\uffb4\112" +
    "\uffb4\113\uffb4\001\002\000\052\033\uffb8\053\uffb8\061\uffb8" +
    "\064\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100" +
    "\uffb8\101\uffb8\102\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8" +
    "\110\uffb8\111\uffb8\112\uffb8\113\uffb8\001\002\000\052\033" +
    "\uffb0\053\uffb0\061\uffb0\064\uffb0\073\101\074\070\075\076" +
    "\076\102\077\077\100\uffb0\101\uffb0\102\uffb0\104\uffb0\105" +
    "\uffb0\106\uffb0\107\uffb0\110\uffb0\111\uffb0\112\uffb0\113\uffb0" +
    "\001\002\000\052\033\uffb2\053\uffb2\061\uffb2\064\uffb2\073" +
    "\101\074\070\075\076\076\102\077\077\100\uffb2\101\uffb2" +
    "\102\uffb2\104\uffb2\105\uffb2\106\075\107\106\110\103\111" +
    "\105\112\uffb2\113\uffb2\001\002\000\052\033\uffb3\053\uffb3" +
    "\061\uffb3\064\uffb3\073\101\074\070\075\076\076\102\077" +
    "\077\100\071\101\uffb3\102\uffb3\104\074\105\100\106\075" +
    "\107\106\110\103\111\105\112\072\113\107\001\002\000" +
    "\052\033\uffac\053\uffac\061\uffac\064\uffac\073\101\074\070" +
    "\075\076\076\102\077\077\100\uffac\101\uffac\102\uffac\104" +
    "\074\105\100\106\075\107\106\110\103\111\105\112\uffac" +
    "\113\uffac\001\002\000\052\033\uffb5\053\uffb5\061\uffb5\064" +
    "\uffb5\073\101\074\070\075\076\076\102\077\077\100\uffb5" +
    "\101\uffb5\102\uffb5\104\074\105\100\106\075\107\106\110" +
    "\103\111\105\112\072\113\107\001\002\000\052\033\uffb9" +
    "\053\uffb9\061\uffb9\064\uffb9\073\uffb9\074\uffb9\075\076\076" +
    "\102\077\077\100\uffb9\101\uffb9\102\uffb9\104\uffb9\105\uffb9" +
    "\106\uffb9\107\uffb9\110\uffb9\111\uffb9\112\uffb9\113\uffb9\001" +
    "\002\000\052\033\uffa7\053\uffa7\061\uffa7\064\uffa7\073\uffa7" +
    "\074\uffa7\075\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7\102" +
    "\uffa7\104\uffa7\105\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7" +
    "\112\uffa7\113\uffa7\001\002\000\072\033\uff9b\034\uff9b\035" +
    "\uff9b\036\uff9b\037\uff9b\040\uff9b\053\uff9b\061\uff9b\064\uff9b" +
    "\065\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076" +
    "\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b\104\uff9b\105\uff9b" +
    "\106\uff9b\107\uff9b\110\uff9b\111\uff9b\112\uff9b\113\uff9b\001" +
    "\002\000\052\033\uffa8\053\uffa8\061\uffa8\064\uffa8\073\uffa8" +
    "\074\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8\101\uffa8\102" +
    "\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8\110\uffa8\111\uffa8" +
    "\112\uffa8\113\uffa8\001\002\000\052\033\uffa6\053\uffa6\061" +
    "\uffa6\064\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6" +
    "\100\uffa6\101\uffa6\102\uffa6\104\uffa6\105\uffa6\106\uffa6\107" +
    "\uffa6\110\uffa6\111\uffa6\112\uffa6\113\uffa6\001\002\000\052" +
    "\033\uffa5\053\uffa5\061\uffa5\064\uffa5\073\uffa5\074\uffa5\075" +
    "\uffa5\076\uffa5\077\uffa5\100\uffa5\101\uffa5\102\uffa5\104\uffa5" +
    "\105\uffa5\106\uffa5\107\uffa5\110\uffa5\111\uffa5\112\uffa5\113" +
    "\uffa5\001\002\000\044\061\136\073\101\074\070\075\076" +
    "\076\102\077\077\100\071\101\104\102\073\104\074\105" +
    "\100\106\075\107\106\110\103\111\105\112\072\113\107" +
    "\001\002\000\052\033\uffaa\053\uffaa\061\uffaa\064\uffaa\073" +
    "\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa\101\uffaa" +
    "\102\uffaa\104\uffaa\105\uffaa\106\uffaa\107\uffaa\110\uffaa\111" +
    "\uffaa\112\uffaa\113\uffaa\001\002\000\054\033\uffa3\053\uffa3" +
    "\061\uffa3\064\uffa3\065\066\073\uffa3\074\uffa3\075\uffa3\076" +
    "\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3\104\uffa3\105\uffa3" +
    "\106\uffa3\107\uffa3\110\uffa3\111\uffa3\112\uffa3\113\uffa3\001" +
    "\002\000\026\014\017\015\022\016\006\017\027\020\021" +
    "\021\005\022\010\023\031\024\020\025\030\001\002\000" +
    "\004\061\142\001\002\000\052\033\uffa2\053\uffa2\061\uffa2" +
    "\064\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2\100" +
    "\uffa2\101\uffa2\102\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2" +
    "\110\uffa2\111\uffa2\112\uffa2\113\uffa2\001\002\000\052\033" +
    "\uffa9\053\uffa9\061\uffa9\064\uffa9\073\uffa9\074\uffa9\075\uffa9" +
    "\076\uffa9\077\uffa9\100\uffa9\101\uffa9\102\uffa9\104\uffa9\105" +
    "\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9\112\uffa9\113\uffa9" +
    "\001\002\000\044\064\145\073\101\074\070\075\076\076" +
    "\102\077\077\100\071\101\104\102\073\104\074\105\100" +
    "\106\075\107\106\110\103\111\105\112\072\113\107\001" +
    "\002\000\074\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e" +
    "\040\uff9e\053\uff9e\061\uff9e\063\041\064\uff9e\065\uff9e\071" +
    "\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e" +
    "\100\uff9e\101\uff9e\102\uff9e\104\uff9e\105\uff9e\106\uff9e\107" +
    "\uff9e\110\uff9e\111\uff9e\112\uff9e\113\uff9e\001\002\000\072" +
    "\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\053" +
    "\uff9f\061\uff9f\064\uff9f\065\uff9f\071\uff9f\072\uff9f\073\uff9f" +
    "\074\uff9f\075\uff9f\076\uff9f\077\uff9f\100\uff9f\101\uff9f\102" +
    "\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f\110\uff9f\111\uff9f" +
    "\112\uff9f\113\uff9f\001\002\000\004\046\150\001\002\000" +
    "\030\014\017\015\022\016\006\017\027\020\021\021\005" +
    "\022\010\023\031\024\020\025\030\026\024\001\002\000" +
    "\032\014\017\015\022\016\006\017\027\020\021\021\005" +
    "\022\010\023\031\024\020\025\030\026\024\047\uffe4\001" +
    "\002\000\004\047\153\001\002\000\004\027\154\001\002" +
    "\000\004\053\155\001\002\000\040\002\uffe6\004\uffe6\005" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\001" +
    "\002\000\004\047\uffe5\001\002\000\004\002\001\001\002" +
    "\000\004\002\000\001\002\000\004\014\162\001\002\000" +
    "\004\060\163\001\002\000\030\014\017\015\022\016\006" +
    "\017\027\020\021\021\005\022\010\023\031\024\020\025" +
    "\030\061\164\001\002\000\006\046\200\053\351\001\002" +
    "\000\004\061\176\001\002\000\004\014\167\001\002\000" +
    "\010\033\ufff2\061\ufff2\063\170\001\002\000\004\064\174" +
    "\001\002\000\006\033\172\061\ufff5\001\002\000\026\014" +
    "\017\015\022\016\006\017\027\020\021\021\005\022\010" +
    "\023\031\024\020\025\030\001\002\000\004\061\ufff4\001" +
    "\002\000\010\033\ufff2\061\ufff2\063\170\001\002\000\006" +
    "\033\ufff3\061\ufff3\001\002\000\006\046\200\053\177\001" +
    "\002\000\040\002\ufff9\004\ufff9\005\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\026\ufff9\027\ufff9\001\002\000\052\014\207" +
    "\015\022\016\006\017\027\020\021\021\005\022\010\023" +
    "\031\024\020\025\030\026\024\030\204\031\212\032\203" +
    "\041\206\043\205\047\uffd9\052\221\054\222\056\211\001" +
    "\002\000\040\002\ufff7\004\ufff7\005\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\001\002\000\004\053\350" +
    "\001\002\000\004\053\347\001\002\000\040\006\052\007" +
    "\057\010\044\011\061\012\046\013\054\014\060\053\345" +
    "\060\053\062\050\066\056\071\064\072\051\074\045\114" +
    "\062\001\002\000\004\060\324\001\002\000\004\060\316" +
    "\001\002\000\024\014\uffeb\034\uff9d\035\uff9d\036\uff9d\037" +
    "\uff9d\040\uff9d\060\307\063\041\065\uff9d\001\002\000\052" +
    "\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\041\uffd5\043\uffd5\047\uffd5\052\uffd5\054\uffd5\056" +
    "\uffd5\001\002\000\004\060\301\001\002\000\004\053\300" +
    "\001\002\000\052\014\207\015\022\016\006\017\027\020" +
    "\021\021\005\022\010\023\031\024\020\025\030\026\024" +
    "\030\204\031\212\032\203\041\206\043\205\047\uffd9\052" +
    "\221\054\222\056\211\001\002\000\004\053\276\001\002" +
    "\000\052\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\041\uffd6\043\uffd6\047\uffd6\052\uffd6\054" +
    "\uffd6\056\uffd6\001\002\000\052\014\207\015\022\016\006" +
    "\017\027\020\021\021\005\022\010\023\031\024\020\025" +
    "\030\026\024\030\204\031\212\032\203\041\206\043\205" +
    "\047\uffd9\052\221\054\222\056\211\001\002\000\016\034" +
    "\244\035\245\036\247\037\246\040\243\065\066\001\002" +
    "\000\004\047\274\001\002\000\004\060\231\001\002\000" +
    "\004\046\200\001\002\000\004\055\224\001\002\000\004" +
    "\060\225\001\002\000\036\006\052\007\057\010\044\011" +
    "\061\012\046\013\054\014\060\060\053\062\050\066\056" +
    "\071\064\072\051\074\045\114\062\001\002\000\044\061" +
    "\227\073\101\074\070\075\076\076\102\077\077\100\071" +
    "\101\104\102\073\104\074\105\100\106\075\107\106\110" +
    "\103\111\105\112\072\113\107\001\002\000\004\053\230" +
    "\001\002\000\052\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\041\uffc1\043\uffc1\047\uffc1\052" +
    "\uffc1\054\uffc1\056\uffc1\001\002\000\006\014\060\053\232" +
    "\001\002\000\036\006\052\007\057\010\044\011\061\012" +
    "\046\013\054\014\060\060\053\062\050\066\056\071\064" +
    "\072\051\074\045\114\062\001\002\000\004\053\234\001" +
    "\002\000\036\006\052\007\057\010\044\011\061\012\046" +
    "\013\054\014\060\060\053\062\050\066\056\071\064\072" +
    "\051\074\045\114\062\001\002\000\044\053\236\073\101" +
    "\074\070\075\076\076\102\077\077\100\071\101\104\102" +
    "\073\104\074\105\100\106\075\107\106\110\103\111\105" +
    "\112\072\113\107\001\002\000\040\006\052\007\057\010" +
    "\044\011\061\012\046\013\054\014\060\060\053\061\240" +
    "\062\050\066\056\071\064\072\051\074\045\114\062\001" +
    "\002\000\044\061\260\073\101\074\070\075\076\076\102" +
    "\077\077\100\071\101\104\102\073\104\074\105\100\106" +
    "\075\107\106\110\103\111\105\112\072\113\107\001\002" +
    "\000\004\046\200\001\002\000\004\061\255\001\002\000" +
    "\064\034\244\035\245\036\247\037\246\040\243\061\uffa1" +
    "\065\066\071\133\072\134\073\uffa1\074\uffa1\075\uffa1\076" +
    "\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1\104\uffa1\105\uffa1" +
    "\106\uffa1\107\uffa1\110\uffa1\111\uffa1\112\uffa1\113\uffa1\001" +
    "\002\000\036\006\052\007\057\010\044\011\061\012\046" +
    "\013\054\014\060\060\053\062\050\066\056\071\064\072" +
    "\051\074\045\114\062\001\002\000\036\006\052\007\057" +
    "\010\044\011\061\012\046\013\054\014\060\060\053\062" +
    "\050\066\056\071\064\072\051\074\045\114\062\001\002" +
    "\000\036\006\052\007\057\010\044\011\061\012\046\013" +
    "\054\014\060\060\053\062\050\066\056\071\064\072\051" +
    "\074\045\114\062\001\002\000\036\006\052\007\057\010" +
    "\044\011\061\012\046\013\054\014\060\060\053\062\050" +
    "\066\056\071\064\072\051\074\045\114\062\001\002\000" +
    "\036\006\052\007\057\010\044\011\061\012\046\013\054" +
    "\014\060\060\053\062\050\066\056\071\064\072\051\074" +
    "\045\114\062\001\002\000\046\053\uffbd\061\uffbd\073\101" +
    "\074\070\075\076\076\102\077\077\100\071\101\104\102" +
    "\073\104\074\105\100\106\075\107\106\110\103\111\105" +
    "\112\072\113\107\001\002\000\046\053\uffbc\061\uffbc\073" +
    "\101\074\070\075\076\076\102\077\077\100\071\101\104" +
    "\102\073\104\074\105\100\106\075\107\106\110\103\111" +
    "\105\112\072\113\107\001\002\000\046\053\uffbe\061\uffbe" +
    "\073\101\074\070\075\076\076\102\077\077\100\071\101" +
    "\104\102\073\104\074\105\100\106\075\107\106\110\103" +
    "\111\105\112\072\113\107\001\002\000\046\053\uffbf\061" +
    "\uffbf\073\101\074\070\075\076\076\102\077\077\100\071" +
    "\101\104\102\073\104\074\105\100\106\075\107\106\110" +
    "\103\111\105\112\072\113\107\001\002\000\046\053\uffbb" +
    "\061\uffbb\073\101\074\070\075\076\076\102\077\077\100" +
    "\071\101\104\102\073\104\074\105\100\106\075\107\106" +
    "\110\103\111\105\112\072\113\107\001\002\000\004\046" +
    "\200\001\002\000\052\014\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\041\uffc6\043\uffc6\047\uffc6" +
    "\052\uffc6\054\uffc6\056\uffc6\001\002\000\052\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\030\uffc5\031\uffc5\032\uffc5\041" +
    "\uffc5\043\uffc5\047\uffc5\052\uffc5\054\uffc5\056\uffc5\001\002" +
    "\000\004\046\200\001\002\000\052\014\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\030\uffc7\031\uffc7\032\uffc7\041\uffc7\043" +
    "\uffc7\047\uffc7\052\uffc7\054\uffc7\056\uffc7\001\002\000\044" +
    "\053\263\073\101\074\070\075\076\076\102\077\077\100" +
    "\071\101\104\102\073\104\074\105\100\106\075\107\106" +
    "\110\103\111\105\112\072\113\107\001\002\000\040\006" +
    "\052\007\057\010\044\011\061\012\046\013\054\014\060" +
    "\060\053\061\265\062\050\066\056\071\064\072\051\074" +
    "\045\114\062\001\002\000\044\061\272\073\101\074\070" +
    "\075\076\076\102\077\077\100\071\101\104\102\073\104" +
    "\074\105\100\106\075\107\106\110\103\111\105\112\072" +
    "\113\107\001\002\000\004\046\200\001\002\000\004\061" +
    "\267\001\002\000\004\046\200\001\002\000\052\014\uffc3" +
    "\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\026\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\041\uffc3\043\uffc3\047\uffc3\052\uffc3\054\uffc3\056\uffc3\001" +
    "\002\000\052\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\041\uffc2\043\uffc2\047\uffc2\052\uffc2" +
    "\054\uffc2\056\uffc2\001\002\000\004\046\200\001\002\000" +
    "\052\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\041\uffc4\043\uffc4\047\uffc4\052\uffc4\054\uffc4" +
    "\056\uffc4\001\002\000\072\002\uffdc\004\uffdc\005\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\041\uffdc\042\uffdc\043\uffdc\047\uffdc\050\uffdc" +
    "\051\uffdc\052\uffdc\054\uffdc\055\uffdc\056\uffdc\001\002\000" +
    "\004\047\uffdb\001\002\000\052\014\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\030\uffd7\031\uffd7\032\uffd7\041\uffd7\043\uffd7" +
    "\047\uffd7\052\uffd7\054\uffd7\056\uffd7\001\002\000\004\047" +
    "\uffda\001\002\000\052\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\041\uffd2\043\uffd2\047\uffd2" +
    "\052\uffd2\054\uffd2\056\uffd2\001\002\000\004\014\302\001" +
    "\002\000\004\057\303\001\002\000\004\014\304\001\002" +
    "\000\004\061\305\001\002\000\004\046\200\001\002\000" +
    "\052\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\030\uffc0\031" +
    "\uffc0\032\uffc0\041\uffc0\043\uffc0\047\uffc0\052\uffc0\054\uffc0" +
    "\056\uffc0\001\002\000\040\006\052\007\057\010\044\011" +
    "\061\012\046\013\054\014\060\060\053\061\311\062\050" +
    "\066\056\071\064\072\051\074\045\114\062\001\002\000" +
    "\046\033\314\061\uffce\073\101\074\070\075\076\076\102" +
    "\077\077\100\071\101\104\102\073\104\074\105\100\106" +
    "\075\107\106\110\103\111\105\112\072\113\107\001\002" +
    "\000\004\053\uffcf\001\002\000\004\061\313\001\002\000" +
    "\004\053\uffd0\001\002\000\036\006\052\007\057\010\044" +
    "\011\061\012\046\013\054\014\060\060\053\062\050\066" +
    "\056\071\064\072\051\074\045\114\062\001\002\000\004" +
    "\061\uffcd\001\002\000\036\006\052\007\057\010\044\011" +
    "\061\012\046\013\054\014\060\060\053\062\050\066\056" +
    "\071\064\072\051\074\045\114\062\001\002\000\044\061" +
    "\320\073\101\074\070\075\076\076\102\077\077\100\071" +
    "\101\104\102\073\104\074\105\100\106\075\107\106\110" +
    "\103\111\105\112\072\113\107\001\002\000\004\046\200" +
    "\001\002\000\054\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\041\uffcc\042\322\043\uffcc\047" +
    "\uffcc\052\uffcc\054\uffcc\056\uffcc\001\002\000\004\046\200" +
    "\001\002\000\052\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\041\uffcb\043\uffcb\047\uffcb\052" +
    "\uffcb\054\uffcb\056\uffcb\001\002\000\036\006\052\007\057" +
    "\010\044\011\061\012\046\013\054\014\060\060\053\062" +
    "\050\066\056\071\064\072\051\074\045\114\062\001\002" +
    "\000\044\061\326\073\101\074\070\075\076\076\102\077" +
    "\077\100\071\101\104\102\073\104\074\105\100\106\075" +
    "\107\106\110\103\111\105\112\072\113\107\001\002\000" +
    "\004\044\327\001\002\000\004\045\330\001\002\000\004" +
    "\046\331\001\002\000\006\050\uffc8\051\333\001\002\000" +
    "\004\050\340\001\002\000\004\006\334\001\002\000\004" +
    "\045\335\001\002\000\004\046\200\001\002\000\006\050" +
    "\uffc8\051\333\001\002\000\004\050\uffc9\001\002\000\004" +
    "\045\341\001\002\000\004\046\200\001\002\000\004\047" +
    "\343\001\002\000\052\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\030\uffca\031\uffca\032\uffca\041\uffca\043\uffca\047\uffca" +
    "\052\uffca\054\uffca\056\uffca\001\002\000\044\053\346\073" +
    "\101\074\070\075\076\076\102\077\077\100\071\101\104" +
    "\102\073\104\074\105\100\106\075\107\106\110\103\111" +
    "\105\112\072\113\107\001\002\000\052\014\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\030\uffd3\031\uffd3\032\uffd3\041\uffd3" +
    "\043\uffd3\047\uffd3\052\uffd3\054\uffd3\056\uffd3\001\002\000" +
    "\052\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\041\uffd4\043\uffd4\047\uffd4\052\uffd4\054\uffd4" +
    "\056\uffd4\001\002\000\052\014\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\030\uffd1\031\uffd1\032\uffd1\041\uffd1\043\uffd1\047" +
    "\uffd1\052\uffd1\054\uffd1\056\uffd1\001\002\000\052\014\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\041\uffd8\043\uffd8\047\uffd8\052\uffd8\054\uffd8\056\uffd8\001" +
    "\002\000\040\002\ufff8\004\ufff8\005\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\027\ufff8\001\002\000\040\002\ufff6" +
    "\004\ufff6\005\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\001\002\000\004\053\354\001\002\000\062\002" +
    "\uffe3\004\uffe3\005\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\041\uffe3\043\uffe3" +
    "\047\uffe3\052\uffe3\054\uffe3\056\uffe3\001\002\000\004\014" +
    "\356\001\002\000\004\053\357\001\002\000\040\002\uffe7" +
    "\004\uffe7\005\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\022\017\024\023\010\026\011\027\014\030" +
    "\013\031\025\032\006\033\015\001\001\000\004\023\354" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\352\016\034\001\001" +
    "\000\002\001\001\000\004\023\160\001\001\000\022\017" +
    "\024\023\010\026\011\027\014\030\013\031\025\032\006" +
    "\033\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\033\016\034\001" +
    "\001\000\004\004\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\036\016\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\143\005\054\025\046" +
    "\001\001\000\010\002\062\005\054\025\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\142\005\054" +
    "\025\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\136\001\001\000\002\001\001" +
    "\000\010\002\134\005\054\025\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\131\005\054\025\046" +
    "\001\001\000\002\001\001\000\004\004\130\001\001\000" +
    "\002\001\001\000\010\002\127\005\054\025\046\001\001" +
    "\000\002\001\001\000\004\005\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\126" +
    "\005\054\025\046\001\001\000\010\002\125\005\054\025" +
    "\046\001\001\000\010\002\124\005\054\025\046\001\001" +
    "\000\010\002\123\005\054\025\046\001\001\000\010\002" +
    "\122\005\054\025\046\001\001\000\010\002\121\005\054" +
    "\025\046\001\001\000\010\002\120\005\054\025\046\001" +
    "\001\000\010\002\117\005\054\025\046\001\001\000\010" +
    "\002\116\005\054\025\046\001\001\000\010\002\115\005" +
    "\054\025\046\001\001\000\010\002\114\005\054\025\046" +
    "\001\001\000\010\002\113\005\054\025\046\001\001\000" +
    "\010\002\112\005\054\025\046\001\001\000\010\002\111" +
    "\005\054\025\046\001\001\000\010\002\110\005\054\025" +
    "\046\001\001\000\010\002\107\005\054\025\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\150\020\151\023\010\001\001\000" +
    "\010\017\150\020\155\023\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\164\023\165\001" +
    "\001\000\004\006\351\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\172\023\165\001\001\000\002" +
    "\001\001\000\004\021\174\001\001\000\002\001\001\000" +
    "\004\006\200\001\001\000\002\001\001\000\024\003\213" +
    "\005\216\010\214\011\207\013\201\014\217\017\215\023" +
    "\010\024\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\343\005\054\025\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\213\005\216\010\214\011\207\013\201" +
    "\014\276\017\215\023\010\024\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\213\005\216\010\214" +
    "\011\207\013\201\014\274\017\215\023\010\024\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\225\005\054\025\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\232\005\216\001\001\000\010\002\261\005\054\025\046" +
    "\001\001\000\002\001\001\000\010\002\234\005\054\025" +
    "\046\001\001\000\002\001\001\000\012\002\236\003\240" +
    "\005\241\025\046\001\001\000\002\001\001\000\004\006" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\253\005\054\025\046\001\001\000\010\002\252\005" +
    "\054\025\046\001\001\000\010\002\251\005\054\025\046" +
    "\001\001\000\010\002\250\005\054\025\046\001\001\000" +
    "\010\002\247\005\054\025\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\263\003\265\005\241" +
    "\025\046\001\001\000\002\001\001\000\004\006\270\001" +
    "\001\000\002\001\001\000\004\006\267\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\305\001\001\000\002\001\001\000\012\002" +
    "\307\005\054\012\311\025\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\307\005\054\012\314\025\046\001\001\000\002" +
    "\001\001\000\010\002\316\005\054\025\046\001\001\000" +
    "\002\001\001\000\004\006\320\001\001\000\002\001\001" +
    "\000\004\006\322\001\001\000\002\001\001\000\010\002" +
    "\324\005\054\025\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\331\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\335\001\001\000\004\007\336\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\341" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // const_val ::= LONG_CONST 
            {
              Constant RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Long e = (Long)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LongConstExp(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // const_val ::= STRING_CONST 
            {
              Constant RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new StringConstExp(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // const_val ::= BOOL_CONST 
            {
              Constant RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BoolConstExp(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // const_val ::= CHAR_CONST 
            {
              Constant RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character e = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CharConstExp(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // const_val ::= REAL_CONST 
            {
              Constant RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new RealConstExp(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // const_val ::= INT_CONST 
            {
              Constant RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IntConstExp(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // variable ::= ID array 
            {
              Var RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Collections.reverse(a); RESULT = new ArrVarExp(id, a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // variable ::= variable DOT ID 
            {
              Var RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new RecordVarExp(v, id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // variable ::= ID 
            {
              Var RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SmplVarExp(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // array ::= OPENBRAC expr CLOSEBRAC 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ArrayList<Exp> arr = new ArrayList<>(); arr.add(e); RESULT = arr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // array ::= OPENBRAC expr CLOSEBRAC array 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.add(e);RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= const_val 
            {
              Exp RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant cv = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= variable 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= SIZEOF OPENPAR type CLOSEPAR 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SizeOf(t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= PLUSPLUS variable 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new PrePlusPlus();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= MINMIN variable 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new PreMinMin();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= variable PLUSPLUS 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new PostPlusPlus();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= variable MINMIN 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new PostMinMin();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= NOT expr 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Not(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= TILDE expr 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tilde(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= MINUS expr 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UMin(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= OPENPAR expr CLOSEPAR 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= expr OR expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Or(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= expr AND expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new And(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= expr LT expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Lt(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= expr GT expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Gt(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= expr LTEQ expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LtEq(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= expr GTEQ expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new GtEq(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= expr INEQ expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new InEq(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= expr EQEQ expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new EqEq(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= expr XOR expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Xor(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= expr MOD expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Mod(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= expr ARITAND expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AritAnd(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= expr ARITOR expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AritOr(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= expr DIV expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Div(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= expr MULT expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Mult(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= expr MINUS expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Minus(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= expr PLUS expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Plus(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // assignment ::= variable DIVEQ expr 
            {
              Assignment RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DivideAssign(v, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assignment ::= variable MULTEQ expr 
            {
              Assignment RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MultAssign(v, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // assignment ::= variable MINUSEQ expr 
            {
              Assignment RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MinusAssign(v, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // assignment ::= variable PLUSEQ expr 
            {
              Assignment RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new PlusAssign(v, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // assignment ::= variable EQ expr 
            {
              Assignment RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new EqAssign(v, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // loop_st ::= FOREACH OPENPAR ID IN ID CLOSEPAR block 
            {
              Statement RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ForEach(b, id1, id2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_st",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // loop_st ::= REPEAT block UNTIL OPENPAR expr CLOSEPAR SEMCOLON 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Repeat(b, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_st",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // loop_st ::= FOR OPENPAR SEMCOLON expr SEMCOLON CLOSEPAR block 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new For(b, null, e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_st",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // loop_st ::= FOR OPENPAR SEMCOLON expr SEMCOLON assignment CLOSEPAR block 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*TODO*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_st",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // loop_st ::= FOR OPENPAR SEMCOLON expr SEMCOLON expr CLOSEPAR block 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new For(b, null, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_st",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // loop_st ::= FOR OPENPAR assignment SEMCOLON expr SEMCOLON CLOSEPAR block 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new For(b, a, e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_st",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // loop_st ::= FOR OPENPAR assignment SEMCOLON expr SEMCOLON assignment CLOSEPAR block 
            {
              Statement RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Assignment a1 = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assignment a2 = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*TODO*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_st",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // loop_st ::= FOR OPENPAR assignment SEMCOLON expr SEMCOLON expr CLOSEPAR block 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new For(b, a, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_st",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cases ::= 
            {
              ArrayList<Case> RESULT =null;
		RESULT = new ArrayList<Case>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cases ::= CASE INT_CONST COLON block cases 
            {
              ArrayList<Case> RESULT =null;
		int icleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int icright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer ic = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Case> cs = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Case> a = cs; a.add(new Case(new IntConstExp(ic), b)); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cond_st ::= SWITCH OPENPAR expr CLOSEPAR OF COLON BEGIN cases DEFAULT COLON block END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Case> cs = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Collections.reverse(cs); RESULT = new Switch(e, cs, b); //switch takes only ids
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_st",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cond_st ::= IF OPENPAR expr CLOSEPAR block ELSE block 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Block b1 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b2 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(e, b1, b2) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_st",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cond_st ::= IF OPENPAR expr CLOSEPAR block 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(e, b, null) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_st",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // params ::= expr COMMA params 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Exp> p = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		p.add(e); RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // params ::= expr 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Exp> a = new ArrayList<Exp>(); a.add(e); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // method_call ::= ID OPENPAR CLOSEPAR 
            {
              MethodCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new MethodCall(id, new ArrayList<Exp>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // method_call ::= ID OPENPAR params CLOSEPAR 
            {
              MethodCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Exp> p = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Collections.reverse(p); RESULT = new MethodCall(id, p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // st ::= CONTINUE SEMCOLON 
            {
              Statement RESULT =null;
		RESULT = new Continue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // st ::= BREAK SEMCOLON 
            {
              Statement RESULT =null;
		RESULT = new Break(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // st ::= RETURN SEMCOLON 
            {
              Statement RESULT =null;
		RESULT = new Return(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // st ::= RETURN expr SEMCOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Return(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // st ::= loop_st 
            {
              Statement RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // st ::= cond_st 
            {
              Statement RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // st ::= assignment SEMCOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // st ::= method_call SEMCOLON 
            {
              Statement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dclst ::= 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList<Node>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dclst",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dclst ::= st dclst 
            {
              ArrayList<Node> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> dst = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		dst.add(s); RESULT = dst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dclst",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dclst ::= dcl dclst 
            {
              ArrayList<Node> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Dcls d = (Dcls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> dst = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		dst.add(d); RESULT = dst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dclst",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // block ::= BEGIN dclst END 
            {
              Block RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> dst = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Collections.reverse(dst); RESULT = new Block(dst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dcl_cnt ::= ID array 
            {
              SpecClass RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Collections.reverse(a); RESULT = new SpecClass(id, a, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dcl_cnt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dcl_cnt ::= ID EQ expr 
            {
              SpecClass RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SpecClass(id, null, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dcl_cnt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dcl_cnt ::= ID 
            {
              SpecClass RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SpecClass(id, null, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dcl_cnt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // commadcls ::= dcl_cnt 
            {
              ArrayList<SpecClass> RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SpecClass dcl = (SpecClass)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<SpecClass> a = new ArrayList<>(); a.add(dcl); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("commadcls",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // commadcls ::= dcl_cnt COMMA commadcls 
            {
              ArrayList<SpecClass> RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SpecClass dcl = (SpecClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<SpecClass> ds = (ArrayList<SpecClass>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ds.add(dcl); RESULT = ds; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("commadcls",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dcl ::= CONST type commadcls SEMCOLON 
            {
              Dcls RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<SpecClass> ds = (ArrayList<SpecClass>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Collections.reverse(ds); RESULT = new Dcls(ds, t, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dcl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dcl ::= type commadcls SEMCOLON 
            {
              Dcls RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<SpecClass> ds = (ArrayList<SpecClass>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Collections.reverse(ds); RESULT = new Dcls(ds, t, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dcl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dcls ::= dcl 
            {
              ArrayList<Dcls> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dcls d = (Dcls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Dcls> a = new ArrayList<>(); a.add(d); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dcls",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dcls ::= dcl dcls 
            {
              ArrayList<Dcls> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Dcls d = (Dcls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Dcls> ds = (ArrayList<Dcls>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ds.add(d); RESULT = ds; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dcls",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // struct_dcl ::= RECORD ID BEGIN dcls END RECORD SEMCOLON 
            {
              StructDcl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Dcls> ds = (ArrayList<Dcls>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Collections.reverse(ds); RESULT = new StructDcl(ds, id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_dcl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // extern_dcl ::= EXTERN type ID SEMCOLON 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extern_dcl",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= AUTO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= VOID 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= STRING 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= ID 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= DOUBLE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= CHAR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= LONG 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= FLOAT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= BOOL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= INT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // argarray ::= 
            {
              Integer RESULT =null;
		RESULT = 0; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argarray",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // argarray ::= OPENBRAC CLOSEBRAC argarray 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argarray",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // args ::= type ID argarray COMMA args 
            {
              ArrayList<FuncArg> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<FuncArg> a2 = (ArrayList<FuncArg>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a2.add(new FuncArg(t, id, a1)); RESULT = a2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // args ::= type ID argarray 
            {
              ArrayList<FuncArg> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<FuncArg> arr = new ArrayList<>();
                arr.add(new FuncArg(t, id, a)); RESULT = arr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // func_dcl ::= FUNCTION type ID OPENPAR CLOSEPAR block 
            {
              FunctionDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FunctionDeclaration( new ArrayList<FuncArg>(), t, id, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dcl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func_dcl ::= FUNCTION type ID OPENPAR args CLOSEPAR block 
            {
              FunctionDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<FuncArg> a = (ArrayList<FuncArg>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Collections.reverse(a); RESULT = new FunctionDeclaration(a, t, id, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dcl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_dcl ::= FUNCTION type ID OPENPAR CLOSEPAR SEMCOLON 
            {
              FunctionDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new FunctionDeclaration( new ArrayList<FuncArg>(), t, id, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dcl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func_dcl ::= FUNCTION type ID OPENPAR args CLOSEPAR SEMCOLON 
            {
              FunctionDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<FuncArg> a = (ArrayList<FuncArg>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Collections.reverse(a); RESULT = new FunctionDeclaration(a, t, id, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dcl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // func_extern ::= extern_dcl 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_extern",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // func_extern ::= func_dcl 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDeclaration e = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_extern",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // prog ::= struct_dcl 
            {
              Node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructDcl p = (StructDcl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // prog ::= func_extern 
            {
              Node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog ::= dcl 
            {
              Node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dcls p = (Dcls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= prog 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Program ps = new Program(); ps.add(p); RESULT = ps; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= prog program 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Program ps = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ps.add(p); RESULT = ps; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

