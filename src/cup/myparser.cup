package cup;

import java.util.*;
import byteCode.Node;
import byteCode.Program;
import byteCode.block.Block;
import byteCode.declaration.function.FuncArg;
import byteCode.declaration.function.FunctionDeclaration;
import byteCode.declaration.var.Dcls;
import byteCode.declaration.var.SpecClass;
import byteCode.declaration.var.StructDcl;
import byteCode.exp.Exp;
import byteCode.exp.binExp.arith.*;
import byteCode.exp.binExp.cond.*;
import byteCode.exp.constant.*;
import byteCode.exp.unExp.*;
import byteCode.exp.var.ArrVarExp;
import byteCode.exp.var.RecordVarExp;
import byteCode.exp.var.SmplVarExp;
import byteCode.exp.var.Var;
import byteCode.statement.*;
import byteCode.statement.assignments.*;
import byteCode.statement.cond.Case;
import byteCode.statement.cond.If;
import byteCode.statement.cond.Switch;
import byteCode.statement.loop.For;
import byteCode.statement.loop.ForEach;
import byteCode.statement.loop.Repeat;

terminal EXTERN, FUNCTION;

//variables

terminal Integer INT_CONST;
terminal Boolean BOOL_CONST;
terminal Long LONG_CONST;
terminal Character CHAR_CONST;
terminal Double REAL_CONST;
terminal String STRING_CONST, ID;


//end variables
terminal String AUTO, INT, BOOL, FLOAT, LONG, CHAR, DOUBLE, STRING, VOID;
terminal CONST, RECORD;
terminal RETURN, BREAK, CONTINUE;
terminal COMMA, EQ, PLUSEQ, MINUSEQ, MULTEQ, DIVEQ;
terminal IF, ELSE, SWITCH, OF, COLON, BEGIN, END, DEFAULT, CASE;
terminal FOR, SEMCOLON, REPEAT, UNTIL, FOREACH, IN;
terminal OPENPAR, CLOSEPAR, SIZEOF;
terminal OPENBRAC, CLOSEBRAC, DOT, TILDE, PREMINMIN, PREPLUSPLUS, MINMIN, PLUSPLUS;
terminal PLUS, MINUS, MULT, DIV, MOD, ARITAND, ARITOR, XOR, UMIN;
terminal EQEQ, INEQ, GTEQ, LTEQ, GT, LT, AND, OR, NOT;

nonterminal Exp expr;
nonterminal Assignment assignment;
nonterminal ArrayList<Exp> array;
nonterminal Var variable;
nonterminal Block block;
nonterminal ArrayList<Case> cases;
nonterminal Statement cond_st, loop_st;
nonterminal ArrayList<Exp> params;
nonterminal MethodCall method_call;
nonterminal ArrayList<Node> dclst;
nonterminal ArrayList<SpecClass> commadcls;
nonterminal SpecClass dcl_cnt;
nonterminal Dcls dcl;
nonterminal ArrayList<Dcls> dcls;
nonterminal Integer argarray;
nonterminal ArrayList<FuncArg> args;
nonterminal String type;
nonterminal Statement st;
nonterminal Constant const_val;
nonterminal StructDcl struct_dcl;
nonterminal FunctionDeclaration func_dcl;
nonterminal Node prog, func_extern, extern_dcl;
nonterminal Program program;


precedence left COMMA;
precedence right EQ, PLUSEQ, MINUSEQ, MULTEQ, DIVEQ;

precedence left ARITOR;
precedence left XOR;
precedence left ARITAND;
precedence left OR;
precedence left AND;
precedence left EQEQ, INEQ;
precedence left GT, GTEQ, LT, LTEQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV, MOD;
precedence right NOT, TILDE, UMIN, SIZEOF, PREMINMIN, PREPLUSPLUS;
precedence left MINMIN, PLUSPLUS, OPENPAR, DOT;

start with program;

program ::=     prog:p program:ps {:ps.add(p); RESULT = ps; :}
              |
                prog:p {:Program ps = new Program(); ps.add(p); RESULT = ps; :};

prog ::= dcl:p {:RESULT = p; :} | func_extern:p {:RESULT = p; :} | struct_dcl:p {:RESULT = p; :};

func_extern ::= func_dcl:e {:RESULT = e; :} | extern_dcl:e {:RESULT = e; :};

func_dcl ::=  FUNCTION type:t ID:id OPENPAR args:a CLOSEPAR SEMCOLON
                {:Collections.reverse(a); RESULT = new FunctionDeclaration(a, t, id, null); :}
            | FUNCTION type:t ID:id OPENPAR CLOSEPAR SEMCOLON
                {:RESULT = new FunctionDeclaration( new ArrayList<FuncArg>(), t, id, null); :}
            | FUNCTION type:t ID:id OPENPAR args:a CLOSEPAR block:b
                {:Collections.reverse(a); RESULT = new FunctionDeclaration(a, t, id, b); :}
            | FUNCTION type:t ID:id OPENPAR CLOSEPAR block:b
                {:RESULT = new FunctionDeclaration( new ArrayList<FuncArg>(), t, id, b); :};

args ::=   type:t ID:id argarray:a
              {:ArrayList<FuncArg> arr = new ArrayList<>();
                arr.add(new FuncArg(t, id, a)); RESULT = arr; :}
         |
           type:t ID:id argarray:a1 COMMA args:a2
              {:a2.add(new FuncArg(t, id, a1)); RESULT = a2; :};

argarray ::=   OPENBRAC CLOSEBRAC argarray:a {:RESULT = a + 1; :}
             |
                {:RESULT = 0; :};

type ::=   INT:e {:RESULT = e; :}
         | BOOL:e {:RESULT = e; :}
         | FLOAT:e {:RESULT = e; :}
         | LONG:e {:RESULT = e; :}
         | CHAR:e {:RESULT = e; :}
         | DOUBLE:e {:RESULT = e; :}
         | ID:e {:RESULT = e; :}
         | STRING:e {:RESULT = e; :}
         | VOID:e {:RESULT = e; :}
         | AUTO:e {:RESULT = e; :};

extern_dcl ::= EXTERN type:t ID:id SEMCOLON;

struct_dcl ::= RECORD ID:id BEGIN dcls:ds END RECORD SEMCOLON
                 {:Collections.reverse(ds); RESULT = new StructDcl(ds, id);:};
dcls ::=  dcl:d dcls:ds {:ds.add(d); RESULT = ds; :}
        |
          dcl:d {:ArrayList<Dcls> a = new ArrayList<>(); a.add(d); RESULT = a; :};

dcl ::=  type:t commadcls:ds SEMCOLON
            {:Collections.reverse(ds); RESULT = new Dcls(ds, t, false); :}
       |
         CONST type:t commadcls:ds SEMCOLON
            {:Collections.reverse(ds); RESULT = new Dcls(ds, t, true); :};

commadcls ::=   dcl_cnt:dcl COMMA commadcls:ds
                  {:ds.add(dcl); RESULT = ds; :}
              |
                dcl_cnt:dcl
                  {:ArrayList<SpecClass> a = new ArrayList<>(); a.add(dcl); RESULT = a; :};

dcl_cnt ::= ID:id {:RESULT = new SpecClass(id, null, null);:}
          | ID:id EQ expr:e {:RESULT = new SpecClass(id, null, e); :}
          | ID:id array:a {:Collections.reverse(a); RESULT = new SpecClass(id, a, null); :};

block ::= BEGIN dclst:dst END {:Collections.reverse(dst); RESULT = new Block(dst); :};

dclst ::=    dcl:d dclst:dst  {:dst.add(d); RESULT = dst; :}
           | st:s dclst:dst  {:dst.add(s); RESULT = dst; :}
           |    {:RESULT = new ArrayList<Node>(); :};

st ::=    method_call:m SEMCOLON  {:RESULT = m; :}
        | assignment:a SEMCOLON  {:RESULT = a; :}
        | cond_st:st {:RESULT = st; :}
        | loop_st:st {:RESULT = st; :}
        | RETURN expr:e SEMCOLON {:RESULT = new Return(e); :}
        | RETURN SEMCOLON {:RESULT = new Return(); :}
        | BREAK SEMCOLON {:RESULT = new Break(); :}
        | CONTINUE SEMCOLON {:RESULT = new Continue(); :};

method_call ::=   ID:id OPENPAR params:p CLOSEPAR
                    {:Collections.reverse(p); RESULT = new MethodCall(id, p); :}
                | ID:id OPENPAR CLOSEPAR
                    {:RESULT = new MethodCall(id, new ArrayList<Exp>());:};

params ::=   expr:e {:ArrayList<Exp> a = new ArrayList<Exp>(); a.add(e); RESULT = a; :}
           | expr:e COMMA params:p {:p.add(e); RESULT = p; :};

cond_st ::=   IF OPENPAR expr:e CLOSEPAR block:b {:RESULT = new If(e, b, null) ;:}
            | IF OPENPAR expr:e CLOSEPAR block:b1 ELSE block:b2 {:RESULT = new If(e, b1, b2) ;:}
            | SWITCH OPENPAR expr:e CLOSEPAR OF COLON BEGIN cases:cs DEFAULT COLON block:b END
                {:Collections.reverse(cs); RESULT = new Switch(e, cs, b); //switch takes only ids:};

cases ::=     CASE INT_CONST:ic COLON block:b cases:cs
                {:ArrayList<Case> a = cs; a.add(new Case(new IntConstExp(ic), b)); RESULT = a; :}
            |   {:RESULT = new ArrayList<Case>();:};

loop_st ::=  FOR OPENPAR assignment:a SEMCOLON expr:e1 SEMCOLON expr:e2 CLOSEPAR block:b
                {:RESULT = new For(b, a, e1, e2); :}
           | FOR OPENPAR assignment:a1 SEMCOLON expr:e SEMCOLON assignment:a2 CLOSEPAR block:b
                {:/*TODO*/ :}
           | FOR OPENPAR assignment:a SEMCOLON expr:e SEMCOLON CLOSEPAR block:b
                {:RESULT = new For(b, a, e, null); :}
           | FOR OPENPAR SEMCOLON expr:e1 SEMCOLON expr:e2 CLOSEPAR block:b
                {:RESULT = new For(b, null, e1, e2); :}
           | FOR OPENPAR SEMCOLON expr:e SEMCOLON assignment:a CLOSEPAR block:b
                {:/*TODO*/:}
           | FOR OPENPAR SEMCOLON expr:e SEMCOLON CLOSEPAR block:b
                {:RESULT = new For(b, null, e, null); :}
           | REPEAT block : b UNTIL OPENPAR expr : e CLOSEPAR SEMCOLON
                {:RESULT = new Repeat(b, e); :}
           | FOREACH OPENPAR ID : id1 IN ID : id2 CLOSEPAR block : b
                {:RESULT = new ForEach(b, id1, id2);:};

assignment ::=   variable:v EQ expr:e {:RESULT = new EqAssign(v, e); :}
               | variable:v PLUSEQ expr:e {:RESULT = new PlusAssign(v, e); :}
               | variable:v MINUSEQ expr:e {:RESULT = new MinusAssign(v, e); :}
               | variable:v MULTEQ expr:e {:RESULT = new MultAssign(v, e); :}
               | variable:v DIVEQ expr:e {:RESULT = new DivideAssign(v, e); :};

expr ::=   expr:e1 PLUS expr:e2 {:RESULT = new Plus(e1, e2);:}
         | expr:e1 MINUS expr:e2 {:RESULT = new Minus(e1, e2);:}
         | expr:e1 MULT expr:e2 {:RESULT = new Mult(e1, e2);:}
         | expr:e1 DIV expr:e2 {:RESULT = new Div(e1, e2);:}
         | expr:e1 ARITOR expr:e2 {:RESULT = new AritOr(e1, e2);:}
         | expr:e1 ARITAND expr:e2 {:RESULT = new AritAnd(e1, e2);:}
         | expr:e1 MOD expr:e2 {:RESULT = new Mod(e1, e2);:}
         | expr:e1 XOR expr:e2 {:RESULT = new Xor(e1, e2);:}
         | expr:e1 EQEQ expr:e2 {:RESULT = new EqEq(e1, e2);:}
         | expr:e1 INEQ expr:e2 {:RESULT = new InEq(e1, e2);:}
         | expr:e1 GTEQ expr:e2 {:RESULT = new GtEq(e1, e2);:}
         | expr:e1 LTEQ expr:e2 {:RESULT = new LtEq(e1, e2);:}
         | expr:e1 GT expr:e2 {:RESULT = new Gt(e1, e2);:}
         | expr:e1 LT expr:e2 {:RESULT = new Lt(e1, e2);:}
         | expr:e1 AND expr:e2 {:RESULT = new And(e1, e2);:}
         | expr:e1 OR expr:e2 {:RESULT = new Or(e1, e2);:}
         | OPENPAR expr:e CLOSEPAR{: RESULT = e; :}
         | MINUS expr:e  {:RESULT = new UMin(e);:} %prec UMIN
         | TILDE expr:e {:RESULT = new Tilde(e);:} %prec TILDE
         | NOT expr:e {:RESULT = new Not(e);:} %prec NOT
         | variable:v MINMIN {:RESULT = new PostMinMin();:}
         | variable:v PLUSPLUS {:RESULT = new PostPlusPlus();:}
         | MINMIN variable:v {:RESULT = new PreMinMin();:} %prec PREMINMIN
         | PLUSPLUS variable:v {:RESULT = new PrePlusPlus();:} %prec PREPLUSPLUS
         | SIZEOF OPENPAR type:t CLOSEPAR {:RESULT = new SizeOf(t);:}
         | variable:v     {:RESULT = v; :}
         | const_val:cv   {:RESULT = cv; :};

array ::=   OPENBRAC expr:e CLOSEBRAC array:a {:a.add(e);RESULT = a; :}
          | OPENBRAC expr:e CLOSEBRAC
            {:ArrayList<Exp> arr = new ArrayList<>(); arr.add(e); RESULT = arr; :};

variable ::=   ID:id {:RESULT = new SmplVarExp(id); :}
             | variable:v DOT ID:id {:RESULT = new RecordVarExp(v, id); :}
             | ID:id array:a {:Collections.reverse(a); RESULT = new ArrVarExp(id, a);:};

const_val ::= INT_CONST:e {:RESULT = new IntConstExp(e); :}|
              REAL_CONST:e {:RESULT = new RealConstExp(e); :}|
              CHAR_CONST:e {:RESULT = new CharConstExp(e); :} |
              BOOL_CONST:e {:RESULT = new BoolConstExp(e); :}|
              STRING_CONST:e {:RESULT = new StringConstExp(e); :} |
              LONG_CONST:e {:RESULT = new LongConstExp(e); :};